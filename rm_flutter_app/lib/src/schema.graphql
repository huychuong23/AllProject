schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "recipes"
  """
  delete_recipes(
    """filter the rows which have to be deleted"""
    where: recipes_bool_exp!
  ): recipes_mutation_response

  """
  delete single row from the table: "recipes"
  """
  delete_recipes_by_pk(id: Int!): recipes

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: Int!): users

  """
  insert data into the table: "recipes"
  """
  insert_recipes(
    """the rows to be inserted"""
    objects: [recipes_insert_input!]!

    """upsert condition"""
    on_conflict: recipes_on_conflict
  ): recipes_mutation_response

  """
  insert a single row into the table: "recipes"
  """
  insert_recipes_one(
    """the row to be inserted"""
    object: recipes_insert_input!

    """upsert condition"""
    on_conflict: recipes_on_conflict
  ): recipes

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users

  """
  update data of the table: "recipes"
  """
  update_recipes(
    """increments the numeric columns with given value of the filtered values"""
    _inc: recipes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: recipes_set_input

    """filter the rows which have to be updated"""
    where: recipes_bool_exp!
  ): recipes_mutation_response

  """
  update single row of the table: "recipes"
  """
  update_recipes_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: recipes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: recipes_set_input
    pk_columns: recipes_pk_columns_input!
  ): recipes

  """
  update data of the table: "users"
  """
  update_users(
    """increments the numeric columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "recipes"
  """
  recipes(
    """distinct select on columns"""
    distinct_on: [recipes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [recipes_order_by!]

    """filter the rows returned"""
    where: recipes_bool_exp
  ): [recipes!]!

  """
  fetch aggregated fields from the table: "recipes"
  """
  recipes_aggregate(
    """distinct select on columns"""
    distinct_on: [recipes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [recipes_order_by!]

    """filter the rows returned"""
    where: recipes_bool_exp
  ): recipes_aggregate!

  """fetch data from the table: "recipes" using primary key columns"""
  recipes_by_pk(id: Int!): recipes

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: Int!): users
}

"""
columns and relationships of "recipes"
"""
type recipes {
  description: String!
  id: Int!
  image_url: String!
  name: String!
}

"""
aggregated selection of "recipes"
"""
type recipes_aggregate {
  aggregate: recipes_aggregate_fields
  nodes: [recipes!]!
}

"""
aggregate fields of "recipes"
"""
type recipes_aggregate_fields {
  avg: recipes_avg_fields
  count(columns: [recipes_select_column!], distinct: Boolean): Int!
  max: recipes_max_fields
  min: recipes_min_fields
  stddev: recipes_stddev_fields
  stddev_pop: recipes_stddev_pop_fields
  stddev_samp: recipes_stddev_samp_fields
  sum: recipes_sum_fields
  var_pop: recipes_var_pop_fields
  var_samp: recipes_var_samp_fields
  variance: recipes_variance_fields
}

"""aggregate avg on columns"""
type recipes_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "recipes". All fields are combined with a logical 'AND'.
"""
input recipes_bool_exp {
  _and: [recipes_bool_exp!]
  _not: recipes_bool_exp
  _or: [recipes_bool_exp!]
  description: String_comparison_exp
  id: Int_comparison_exp
  image_url: String_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "recipes"
"""
enum recipes_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  recipes_pkey
}

"""
input type for incrementing numeric columns in table "recipes"
"""
input recipes_inc_input {
  id: Int
}

"""
input type for inserting data into table "recipes"
"""
input recipes_insert_input {
  description: String
  id: Int
  image_url: String
  name: String
}

"""aggregate max on columns"""
type recipes_max_fields {
  description: String
  id: Int
  image_url: String
  name: String
}

"""aggregate min on columns"""
type recipes_min_fields {
  description: String
  id: Int
  image_url: String
  name: String
}

"""
response of any mutation on the table "recipes"
"""
type recipes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [recipes!]!
}

"""
on_conflict condition type for table "recipes"
"""
input recipes_on_conflict {
  constraint: recipes_constraint!
  update_columns: [recipes_update_column!]! = []
  where: recipes_bool_exp
}

"""Ordering options when selecting data from "recipes"."""
input recipes_order_by {
  description: order_by
  id: order_by
  image_url: order_by
  name: order_by
}

"""primary key columns input for table: recipes"""
input recipes_pk_columns_input {
  id: Int!
}

"""
select columns of table "recipes"
"""
enum recipes_select_column {
  """column name"""
  description

  """column name"""
  id

  """column name"""
  image_url

  """column name"""
  name
}

"""
input type for updating data in table "recipes"
"""
input recipes_set_input {
  description: String
  id: Int
  image_url: String
  name: String
}

"""aggregate stddev on columns"""
type recipes_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type recipes_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type recipes_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type recipes_sum_fields {
  id: Int
}

"""
update columns of table "recipes"
"""
enum recipes_update_column {
  """column name"""
  description

  """column name"""
  id

  """column name"""
  image_url

  """column name"""
  name
}

"""aggregate var_pop on columns"""
type recipes_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type recipes_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type recipes_variance_fields {
  id: Float
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type subscription_root {
  """
  fetch data from the table: "recipes"
  """
  recipes(
    """distinct select on columns"""
    distinct_on: [recipes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [recipes_order_by!]

    """filter the rows returned"""
    where: recipes_bool_exp
  ): [recipes!]!

  """
  fetch aggregated fields from the table: "recipes"
  """
  recipes_aggregate(
    """distinct select on columns"""
    distinct_on: [recipes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [recipes_order_by!]

    """filter the rows returned"""
    where: recipes_bool_exp
  ): recipes_aggregate!

  """fetch data from the table: "recipes" using primary key columns"""
  recipes_by_pk(id: Int!): recipes

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: Int!): users
}

"""
columns and relationships of "users"
"""
type users {
  age: Int!
  genre: Boolean!
  id: Int!
  username: String!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  avg: users_avg_fields
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
  stddev: users_stddev_fields
  stddev_pop: users_stddev_pop_fields
  stddev_samp: users_stddev_samp_fields
  sum: users_sum_fields
  var_pop: users_var_pop_fields
  var_samp: users_var_samp_fields
  variance: users_variance_fields
}

"""aggregate avg on columns"""
type users_avg_fields {
  age: Float
  id: Float
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  age: Int_comparison_exp
  genre: Boolean_comparison_exp
  id: Int_comparison_exp
  username: String_comparison_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  users_pkey
}

"""
input type for incrementing numeric columns in table "users"
"""
input users_inc_input {
  age: Int
  id: Int
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  age: Int
  genre: Boolean
  id: Int
  username: String
}

"""aggregate max on columns"""
type users_max_fields {
  age: Int
  id: Int
  username: String
}

"""aggregate min on columns"""
type users_min_fields {
  age: Int
  id: Int
  username: String
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
on_conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "users"."""
input users_order_by {
  age: order_by
  genre: order_by
  id: order_by
  username: order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  id: Int!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  age

  """column name"""
  genre

  """column name"""
  id

  """column name"""
  username
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  age: Int
  genre: Boolean
  id: Int
  username: String
}

"""aggregate stddev on columns"""
type users_stddev_fields {
  age: Float
  id: Float
}

"""aggregate stddev_pop on columns"""
type users_stddev_pop_fields {
  age: Float
  id: Float
}

"""aggregate stddev_samp on columns"""
type users_stddev_samp_fields {
  age: Float
  id: Float
}

"""aggregate sum on columns"""
type users_sum_fields {
  age: Int
  id: Int
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  age

  """column name"""
  genre

  """column name"""
  id

  """column name"""
  username
}

"""aggregate var_pop on columns"""
type users_var_pop_fields {
  age: Float
  id: Float
}

"""aggregate var_samp on columns"""
type users_var_samp_fields {
  age: Float
  id: Float
}

"""aggregate variance on columns"""
type users_variance_fields {
  age: Float
  id: Float
}

